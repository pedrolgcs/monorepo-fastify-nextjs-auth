/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OPT Authenticate API
 * Authenticate using OPT
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod'


/**
 * @summary Authenticate with e-mail
 */
export const authenticateWithEmailBody = zod.object({
  "email": zod.string().email()
})

export const authenticateWithEmailResponse = zod.any()

/**
 * @summary Verify OPT code
 */
export const verifyOPTCodeBody = zod.object({
  "code": zod.string()
})

export const verifyOPTCodeResponse = zod.object({
  "token": zod.string()
})

/**
 * @summary Refresh token
 */
export const refreshTokenResponse = zod.object({
  "token": zod.string()
})

/**
 * @summary List tokens by user
 */
export const getTokensByUserQueryPageSizeMax = 20;


export const getTokensByUserQueryParams = zod.object({
  "page": zod.number().min(1).optional(),
  "pageSize": zod.number().min(1).max(getTokensByUserQueryPageSizeMax).optional()
})

export const getTokensByUserResponse = zod.object({
  "tokens": zod.array(zod.object({
  "id": zod.string(),
  "token": zod.string(),
  "revoked": zod.boolean(),
  "device": zod.string().nullable(),
  "ipAddress": zod.string().nullable(),
  "createdAt": zod.string().datetime(),
  "expiresAt": zod.string().datetime(),
  "isExpired": zod.boolean(),
  "status": zod.enum(['active']).or(zod.enum(['disabled']))
})),
  "meta": zod.object({
  "currentPage": zod.number(),
  "totalPages": zod.number(),
  "pageSize": zod.number(),
  "totalCount": zod.number()
})
})

/**
 * @summary Revoke refresh token
 */
export const revokeRefreshTokenParams = zod.object({
  "id": zod.string()
})

export const revokeRefreshTokenResponse = zod.any()

/**
 * @summary Logout
 */
export const logoutResponse = zod.any()

